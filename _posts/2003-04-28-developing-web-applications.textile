--- 
title: Developing Web Applications
typo_id: 435
layout: post
---
For the last several weeks I've been working pretty hard at getting an e-commerse web site finsihed and ready to go live.  I've been doing it with <a href="http://www.icdevgroup.org" target="_top">Interchange</a>.  Written entirely in Perl, IC runs as a daemon <a href="http://www.apache.org/" target="_top">Apache</a> communicates with over sockets.  I've worked with IC (formerly called "minivend") before on a couple of other catalogs.  I even designed my web site using IC as the framework.  At the time I thought I wanted to become a full-time independent developer doing Interchange consulting.  There's pretty good money to be made with Interchange as a consultant.  Interchange is attractive to smaller shops for several reasons.  First, it's fully open source.  Second, it's always had pretty good demo catalogs available for immediate use.  Third, it has a wide variety of modules to link up with credit card processors.  Fourth, it's quite feature rich.  Last, there's a pretty good community of users and developers.  Mike Heins, the original developer, is very smart and more than willing to lend a helping hand to those who need it.  Of course, being written in Perl is good for me too.  All of these are good reasons to use Interchange.  Smaller shop owners are drawn to it and able to set things up fairly easily.  The opportunity for consultants is that Interchange has a rich API for extending it and handling custom business needs.  Almost all businesses have peculiarities and cusotmizations they need.  This is a great opportunity for developers.
<p />
What I've found though is that Interchange feels too heavy.  It does so much and has so many places where pluggable modules can be swapped out, it really seems more complicated than it needs to be.  I think Mike has said his target audience is people who aren't really developers but know a little HTML.  You can see that in a lot of the design.  It's really designed for the shop keeper to not have to know what happens underneath the covers.  There's a good admin UI for customizing the look, feel, and functionality of the catalog.  The problem is when the default catalog doesn't cover your needs.  When you do have to poke under the cover it's a maze of code and directory hierarchies.  I keep thinking as I'm doing things, "There must be an easier way to do this.  Surely what I'm doing is more commonly needed than just me.  Why am I haveing to work so hard to get this done?"  Maybe the problem is that I'm not following the development community close enough to really grok the architecture and know where all the hooks are for adding extensions.
<p />
I've read several articles concurrent with working heavily in Interchange about using Common Lisp to develop web applications.  <a href="http://www.paulgraham.com/" target="_top">Paul Graham</a> has lots of articles about using CL for web applications and how CL is the most powerful lanugage available and how you should do all your projects in the most powerful language you can.  I like reading PG's site because he makes me feel good about being an elitist programmer.  I often feel restricted in my programming by my language (C/C++, Perl, and now Tcl) and feel like there must be a better way.  Paul Graham assures me there is and I just need to start using it.  I've read two other articles (not currently published on-line) about using a Common Lisp framework for web applications.  They make the same claims PG does.  They even give examples of code to show the tremendous leverage CL gives you in generating complex web forms with just a few lines of code.  Even my friend, David Minor, who's a pretty big PHP fan was impressed with the cleanliness and succinctness of the code.
<p />
I've read similar things in the past and wanted to build a CL-based web application for a while now.  I've always felt it was too far out of my reach and I didn't have enough skills to complete such a project.  I'm not certain I do now either.  It seems like more than a few individuals have "blazed the trail" of CL-based web applications.  I think I have enough gumption to follow the path they've left.  
<p />
As soon as I get my <a href="http://lathi.net/twiki-bin/view/Main/CurrentProject">CurrentProject</a> completed I'm going to dive
full-bore into writing some stuff.  I think I may start with replacing
this perl-based blogging engine with a CL-based one.  That should be a
pretty good gauge.  Blosxom is pretty dense perl code weighing in at less than 500 lines of code.  Using the same file-based methodology I should be able to do the same thing in fewer lines of CL.  After that I'll take stock of my experience and see if it makes sense to pursue it further.  Look forward to me writing more about this.
