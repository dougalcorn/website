--- 
title: Does the language really matter?
typo_id: 380
layout: post
---
I've been thinking of a "grand web-application project" for quite a while now.  Today, I basically "stumbled" across a very good possible solution.  <a href="http://www.greenspun.com/" target="_top">Philip Greenspun</a> and his now defunct company arsDigita developed <a href="http://openacs.org" target="_top">Open ACS</a> as a collaborative development framework.  As it now stands it looks like it could satisfy many of my <a href="http://lathi.net/twiki-bin/view/Main/ProjectTracking">ProjectTracking</a> needs.  The problem is that it depends on <a href="http://www.aolserver.com" target="_top">AOLserver</a> and uses <a href="http://philip.greenspun.com/tcl/" target="_top">Tcl</a> as it's development language.  This is somewhat of a conundrum for me.
<p />
First, Philip Greenspun hails from the MIT AI Labs.  He has significan Lisp knowlege.  In fact, "Greenspun's 10th Law" is a common catch-phrase among Lispers: "Any sufficiently complicated C or Fortran program contains an ad-hoc, informally-specified bug-ridden slow implementation of half of Common Lisp."  And yet, he <em>choose</em> to use Tcl.  It wasn't forced upon him.  He was working on a project and selected Tcl.  Hmm.
<p />
Second, I have some familiarity with Tcl.  I don't particularly care for it.  Tclers claim it has a regular syntax.  It's much more regular than C or Perl.  Yet, I don't find it as uniform as Lisp.  I really don't like the significance of newlines in the language.  I like breaking my conditionals across multiple lines and I think it's ugly to escape the newlines in that situation.  In fact, escaping newlines is somewhat of a pet peeve of mine mainly because I always forget to do it.
<p />
So, what to do?  I've been planning on developing with something like Open ACS for a while now.  It appears to fit many of my requirements.  However, I'm strongly reluctant to take up Open ACS.  As one friend asked me, "Why reinvent the wheel?"  Why, indeed?  I see two questions here.
<p />
First, does it really matter what language the tool is developed in?  I think <a href="http://www.paulgraham.com/" target="_top">Paul Graham</a> makes a pretty strong case the answer is yes.  Should I, as a user, care what language the app is written in?  I've found over the years that I have a tendency to meddle with things.  That's been true of the Linux kernel, XFree86, XEmacs, GNU Emacs, the Afterstep window manager, the Sawfish window manager, the AIM client I use, the web browser I use, my mail client, my blog server, my wiki server, nearly all the software I use I've mucked with in various ways.  If I'm planning on doing web development using a web application framework, I want it to be something I'm comfortable with.  That doesn't mean I have to be fully fluent in the language.  It does mean though that I shouldn't be frustrated by the language I'm working in.
<p />
Second, is Tcl close enough to Lisp to matter?  This is a tough question.  I've got PG (among others) on one hand saying Lisp is the most powerful language available.  On the other hand, we have Philip Greenspun implicitly giving Tcl the nod (I can't find anything he's written where he says Tcl is supperior or even on par with Lisp).  Greenspun did write <a href="http://philip.greenspun.com/tcl/" target="_top">Tcl for Web Nerds</a> with an <a href="http://philip.greenspun.com/tcl/introduction.adp" target="_top">Introduction</a> that makes some comparisons between Tcl and Lisp.  Reading that introduction, I don't get the idea that I should be using Tcl.  Instead, he points out how similar Tcl is to Lisp in fact showing how it's not as close as you'd like.  In the end, he says Lispers "have the satisfaction of knowing that they got it right 30 years before anyone else. But that's about all they have to show for 40 years of hard work and hundreds of millions of dollars in government and private funding."  So, I should use Tcl because it's been more successful?  Because Lisp implementations had many hard years during the AI boom/bust waiting for hardware to catch up?  Similarly, the Tcl wiki site has some pages on <a href="http://mini.net/tcl/2794" target="_top">Playing Lisp</a> where the authors show how to make Tcl look like Lisp.  Functionally, it may be similar.  However, it looks and feels very awkward.
<p />
In the end, I don't think I'm going to use Open ACS.  I don't think I'm even going to install and try it.  Quite simply, I feel like I'll eventually hit the wall with it.  I feel like working in Tcl will make me feel constrained.  I don't want to spend the energy and effort of going down that path with the suspicion of where I think that path leads.  Really, I'm just sad Open ACS is Tcl based.  I guess it validates my thoughts for what would make a good collaborative development environment.  I'll probably draw on them for a lot of ideas.
